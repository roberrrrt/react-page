{"version":3,"sources":["logo.svg","random.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Random","props","state","topic","title","this","max","length","rand","Math","floor","random","topicTitle","undefined","titleArray","filter","value","setState","onClick","handleClick","bind","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,0ICEtBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,MAAO,CACL,2BACA,+DACA,qBACA,iCACA,qBACA,2BACA,qBACA,qBACA,6CACA,eACA,eACA,2BACA,qBACA,2BACA,iCACA,qBACA,qBACA,qBACA,eACA,2BACA,2BACA,2BACA,eACA,eACA,iCACA,2BACA,2BACA,2BACA,uBAjCa,E,0DAsCJ,IACLA,EAAUC,KAAKH,MAAfE,MACFE,EAAMF,EAAMG,OACZC,EAAOC,KAAKC,MAAM,EAAID,KAAKE,UAAYL,EAAM,IAC7CM,OAA6BC,IAAhBT,EAAMI,GAAsBJ,EAAMI,GAAQ,KACvDM,EAAaV,EAAMW,QAAO,SAAAC,GAAK,OAAIA,IAAUJ,KAEnDP,KAAKY,SAAS,CAAEd,MAAOS,EAAYR,MAAOU,M,+BAGlC,IAAD,EACkBT,KAAKH,MAAtBC,EADD,EACCA,MACFI,EAFC,EACQH,MACMG,OAErB,OACE,6BACE,4BAAe,OAAVJ,EAAiB,iBAASA,EAAoB,KAAXI,EAAgB,gCAAc,4BACtE,4BAAQS,MAAM,YAAYE,QAASb,KAAKc,YAAYC,KAAKf,OAAzD,qB,GAxD4BgB,IAAMC,WC0B3BC,MAvBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAchB,kBAAC,EAAD,SCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e51044e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport default class Random extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topic: null,\n      title: [\n        '亞洲舞王',\n        '地球上最浪漫的一首歌',\n        '馬子狗',\n        '我要打十個',\n        '想見你',\n        '第一滴血',\n        '小琉球',\n        '龍蝦洞',\n        '小夫我要進來了',\n        '下蛋',\n        '吹牛',\n        '武漢肺炎',\n        '韓國瑜',\n        '乙武洋匡',\n        '她沒在看我',\n        '狼人殺',\n        '鋼管舞',\n        '螺旋丸',\n        '千鳥',\n        '水之呼吸',\n        '電車癡漢',\n        '多人運動',\n        '黑豹',\n        '舞孃',\n        '進擊的巨人',\n        '彰化雲林',\n        '旋轉大便',\n        '大便旋轉',\n        '按摩棒',\n      ],\n    }\n  }\n\n  handleClick() {\n    const { title } = this.state;\n    const max = title.length;\n    const rand = Math.floor(0 + Math.random() * (max - 0));\n    const topicTitle = title[rand] !== undefined ? title[rand] : null;\n    const titleArray = title.filter(value => value !== topicTitle );\n\n    this.setState({ topic: topicTitle, title: titleArray });\n  }\n\n  render() {\n    const { topic, title } = this.state;\n    const length = title.length;\n\n    return (\n      <div>\n        <h2>{topic !== null ? \"題目: \" + topic : (length === 29 ? \"開始抽題 !!!!\" : \"已無題目\")}</h2>\n        <button value=\"Click me!\" onClick={this.handleClick.bind(this)}>按我</button>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Random from './random';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <p>Hello World Testing!12345789</p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        <Random />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}